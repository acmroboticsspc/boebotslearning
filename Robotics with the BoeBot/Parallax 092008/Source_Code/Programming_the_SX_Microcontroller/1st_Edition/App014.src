; APP014.SRC - Controlling 7-segment displays another variation
; ----------------------------------------------------------------
; Code for application example published in
; "Programming the SX Microcontroller" by Guenther Daubach
; Copyright Parallax Inc. 2002
; ----------------------------------------------------------------

ifdef __SASM
  DEVICE  SX28L, STACKX, OPTIONX
  IRC_CAL IRC_FAST
  FREQ    50_000_000
else  
  DEVICE  SX28AC, OSCHS, OPTIONX
endif
DEVICE  TURBO
RESET   Start

org     $08
Std     = $
Value   ds 2            ; Test values
BCD     ds 3            ; Buffer for BCD digits
Hex     ds 1            ; Buffer for Hex value

org     $30
Leds    = $             ; The LED bank
Column  ds 1            ; Column mask
Digit   ds 1            ; Current display digit
Digits  ds 6            ; Digits buffer

org     $50
Timers  = $
Millsec ds 1            ; Counter for Milliseconds

org     $000

;** VP to control a 7 segment LED matrix with 6 Digits ***************
;
Seg_7

  bank Timers
  mov  w, #250  
  dec  Millsec  
  snz   
    mov Millsec, w      
  sz    
    jmp :LedExit        

  bank Leds       
  mov  w, #Digits       ; Indirectly read data for      
  add  w, Digit         ; the current digit            
  mov  fsr, w           ;                               
  mov  w, ind           ;                               
  and  w, #%00001111    ; Don't allow values > 15       
  call Decode           ; Decimal --> 7-Segment                                     
  clr  rc               ; Set all columns to low                                    
  mov  rb, w            ; Set the segment rows        
  bank Leds                                                      
  mov  rc, Column       ; Set one column line to high 
  clc                   ; and prepare for            
  rl   Column           ; next column and for        
  inc  Digit            ; next digit                 
  mov  w, #6            ; If digit > 5,               
  mov  w, Digit-w       ;                                         
  snz                   ;                                         
    clr Digit           ; digit = 0,                 
  mov  w, #1                                                     
  snz                                                            
    mov Column, w       ; and column mask = %00000001
                                                                 
:LedExit                           
  mov   w, #-200        ; Call the ISR every 4us
  retiw

;** Subroutine returns the 7-cegment coding in w when called with
;   a hexadecimal digit in w.
;   
;   Note:  : Negative logic - 0-Bits turn on the associated LED
;
Decode
  jmp pc+w

; Segments
;
;       dcgbe.fa
  retw %00100100        ; 0
  retw %10101111        ; 1
  retw %01000110        ; 2
  retw %00001110        ; 3
  retw %10001101        ; 4
  retw %00011100        ; 5
  retw %00010100        ; 6
  retw %10101110        ; 7
  retw %00000100        ; 8
  retw %00001100        ; 9

;** Subroutine converts value in Hex into a 3-digits BCD number and
;   stores the result in BCD+2...BCD
;   
HexToBCD
  clr BCD+2             ; Clear the
  clr BCD+1             ;
  clr BCD               ; BCD buffer
  mov w, #100           ; Determine leftmost digit
:Loop100
  sub Hex, w
  snc
    inc BCD+2
  snc
    jmp :Loop100
  add Hex, w
  mov w, #10            ; Determine middle digit
:Loop10
  sub Hex, w
  snc
    inc BCD+1
  snc
    jmp :Loop10
  add Hex, w
  mov BCD, Hex          ; The remainder goes into the
  ret                   ; rightmost digit

org     $100

;** Mainline program *******************************************
;
Start

  clr    fsr

ClearData
  sb     fsr.4
    Setb fsr.3
  clr    ind
  ijnz   fsr, ClearData

  mov    rb, #$ff
  mov    !rb, #0                ; Outputs for cathodes
  clr    rc
  mov    !rc, #%11000000        ; Outputs for anodes
  bank Leds
  mov  Column, #1               ; Initialize the column mask
  mov  !option, #%10011111      ; Enable RTCC interrupt

  mov  Value,   #123
  mov  Value+1, #234

  mov  Hex, Value
  call HexToBCD

Loop
  mov Hex, Value                ; Display Value in Digits+2...
  call HexToBCD                 ; Digits as decimal number
  mov Digits,   BCD
  mov Digits+1, BCD+1
  mov Digits+2, BCD+2

  mov Hex, Value+1              ; Display Value+1 in Digits+5...
  call HexToBCD                 ; Digits+3 as decimal number
  mov Digits+3, BCD
  mov Digits+4, BCD+1
  mov Digits+5, BCD+2

  jmp Loop
