; APP029.SRC - Control Program for the Obstacle-Detecting Boe-Bot
;
; ---------------------------------------------------------------------
; Code for application example published in
; "Programming the SX Microcontroller", 2nd Edition by Guenther Daubach
; Copyright (c) by Parallax Inc. 2004
; ---------------------------------------------------------------------

device  SX28L, oscxt2, turbo, stackx
freq    4_000_000
IRC_CAL IRC_FAST

reset   Main

LServo       = RC.7            ; Output to servo  - left
RServo       = RB.3            ; Output to servo  - right
LSensor      = RC.5            ; Input for left IR sensor
RSensor      = RB.0            ; Input for right IR sensor
LLED         = RC.3            ; Output for left IR LED
RLED         = RB.4            ; Output for right IR LED
Calibrate    = RA.0            ; Input for calibrate jumper

LStop        = 115             ; Adjust values so that the servos don't move
RStop        = 115             ;  when Speed = 0 and Turn = 0
           
             org 8
Timer20L     ds 1              ; Counters for
Timer20H     ds 1              ;  20 ms timer
Ltimer       ds 1              ; Counter for left servo timer
Rtimer       ds 1              ; Counter for right servo timer
LSpeed       ds 1              ; Left servo speed
RSpeed       ds 1              ; Right servo speed
Speed        ds 1              ; The "Bot's" speed
Turn         ds 1              ; The "Bot's" turn factor

             org $30
Sensors      ds 1           
             
        org    0
ISR          
        sb     LServo          ; Is left servo still on?
         jmp   :Right          ;  no - handle right servo
        dec    LTimer          ;  yes - count down
        sz                     ; Left timeout?
         jmp   :Right          ;  no - handle right servo
        clrb   LServo          ;  yes - left servo off
        mov    LTimer, LSpeed  ; Init left timer for next pulse
:Right
        sb     RServo          ; Is right servo still on?
        jmp    :Timer20        ;  no - handle 20 ms timer
        dec    Rtimer          ;  yes - count down
        sz                     ; Right timeout?
         jmp   :Timer20        ;  no - handle 20 ms timer
        clrb   RServo          ;  yes - right servo off
        mov    RTimer, Rspeed  ; Init right timer for next pulse
:Timer20                       ; Handle the 20 ms timer
        dec    Timer20L        ; Count down low order byte
        sz                     ; Is it zero?
         jmp   :ExitISR        ;  no - exit
        mov    Timer20L, #171  ;  yes, initialize and
        dec    Timer20H        ;  count down high order byte
        sz                     ; Is it zero?
         jmp   :ExitISR        ;  no - exit
        mov    Timer20H, #9    ;  yes, initialize and
        setb   LServo          ;  turn the servos
        setb   RServo          ;  on again
:ExitISR
        movb   LLED, Timer20L.0  	; Toggle both
        movb   RLED, Timer20L.0  	;  IR LEDs
        mov    w, #-52         		; ISR is invoked every 13 µs at
        retiw                  		;  4 MHz system clock

; Subroutine calculates the required values for LSpeed and RSpeed based upon
; the calibration factors, and the Speed and Turn parameters.
;
; Note: The routine does not check if the resulting values for LSpeed and
;       RSpeed are out of limits (100...130).
;
CalcValues
        mov    LSpeed, #LStop  		; Initialize left speed to stop
        mov    RSpeed, #RStop  		; Initialize right speed to stop

        add    LSpeed, Speed   		; Add the Speed value
        sub    RSpeed, Speed  		; Subtract the Speed value

        add    LSpeed, Turn    		;  no, add the turn value
        add    RSpeed, Turn    		;  to both speeds
        ret

Main
        mode   $0e             		; Select PLP
        mov    !ra, #%11111110 		; Activate pull-up on pin 0
        clrb   LServo
        clrb   RServo
        mode   $0f             		; Select TRIS
        mov    !rb, #%11110111 		; RB.3 is output for left servo,
        mov    !rc, #%01111111 		; RC.7 is output for right servo,
        mov    !option, #%00001000 	; Enable interrupts
        mov    Speed, #0
        mov    Turn, #0
        bank   Sensors
:Loop
        clr    Speed
        clr    Turn
        clr    Sensors
        sb     Calibrate         	; Do nothing when the Calibrate
          jmp  :Loop               	;  jumper is in position
        cjne   Timer20H, #3, $		; Wait for Timer20H = 3
        mov    !rb, #%11100111     	; Right IRLED to output
        cjne   Timer20H, #2, $     	; Wait for Timer20H = 2     
        mov    !rb, #%11110111     	; Right IRLED to input
        movb   Sensors.0, RSensor  	; Copy right IR detect bit
        mov    !rc, #%01110111     	; Left IRLED to output
        cjne   Timer20H, #1, $     	; Wait for Timer20H = 1     
        movb   Sensors.1, LSensor  	; Copy left IR detect bit
        mov    !rc, #%01111111     	; Left IRLED to input
        mov    w, Sensors          	; Depending on the sensor states,
        jmp    pc+w                	;  jump to the state handler
        jmp    :Both
        jmp    :Right
        jmp    :Left
        jmp    :None
:Both                      		; Both sensors detect, so
        mov    Speed, #-10  		;  back up
        jmp    :Done
:Right                     		; Right sensor detects, so
        mov    Turn, #10   		;  turn left
        jmp    :Done
:Left                      		; Left sensor detects, so
        mov    Turn, #-10   		;  turn right
        jmp    :Done
:None                      		; No obstacles at all, so
        mov    Speed, #10   		;  go forward
:Done        
        call   CalcValues  		; Calculate LSpeed and RSpeed
        jmp    :Loop       		; Repeat it forever
