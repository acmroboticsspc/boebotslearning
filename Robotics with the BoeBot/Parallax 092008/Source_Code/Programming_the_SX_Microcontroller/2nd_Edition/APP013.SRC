; APP013.SRC - Displaying Three SX Registers on Hexadecimal
;
; ---------------------------------------------------------------------
; Code for application example published in
; "Programming the SX Microcontroller", 2nd Edition by Guenther Daubach
; Copyright (c) by Parallax Inc. 2004
; ---------------------------------------------------------------------

include "Setup28.inc"
RESET   Main

;** Macro copies the contents of a register into two positions
;   of the display buffer.
;
;   Call:      MovDisp <First Display Buffer Register>, <Register>
;
;   Uses:    : w
;
MovDisp MACRO 2
  mov w, \2                         ; Display value -> w
  mov Digits + (\1 * 2), w          ; Save value to left and right
  mov Digits + 1 + (\1 * 2), w      ;  display buffer item
  swap Digits + 1 + (\1 * 2)        ; Exchange upper and lower   
                                    ;  nibble in left digit
ENDM

org     $08
Std     = $
Value   ds 3                        ; Three registers for demonstration
                                    ;  purposes
org     $30
Leds    = $
Column  ds 1                       ; The LED bank         
Digit   ds 1                       ; Column mask          
Digits  ds 6                       ; Current display digit

org     $50
Timers  = $
Millsec ds 1                       ; Counter for Milliseconds

org     $000

  MovDisp 0, Value                 ; Refresh the display
  MovDisp 1, Value+1               ;  Buffer
  MovDisp 2, Value+2               ;

 
;** VP to control a 7 segment LED matrix with 6 Digits ***************
;
Seg_7

  bank Timers
  mov  w, #250  
  dec  Millsec  
  snz   
    mov Millsec, w  
  sz    
    jmp :LedExit    

  bank Leds   
  mov  w, #Digits                  ; Indirectly read data for      
  add  w, Digit                    ;  the current digit            
  mov  fsr, w                      ;                               
  mov  w, ind                      ;                               
  and  w, #%00001111               ; Don't allow values > 15       
  call Decode                      ; Decimal --> 7-Segment                                     
  clr  rc                          ; Set all columns to low                                    
  mov  rb, w                       ; Set the segment rows        
  bank Leds                                                      
  mov  rc, Column                  ; Set one column line to high 
  clc                              ;  and prepare for            
  rl   Column                      ;  next column and for        
  inc  Digit                       ;  next digit                 
  mov  w, #6                       ; If digit > 5,               
  mov  w, Digit-w                                                
  snz                                                            
    clr Digit                      ;  digit = 0,                 
  mov  w, #1                                                     
  snz                                                            
    mov Column, w                  ;  and column mask = %00000001
                                                                 
:LedExit                           
  mov   w, #-200                   ; Call the ISR every 4us
  retiw                                                    
                                   
;** Subroutine returns the 7-cegment coding in w when called with
;   a hexadecimal digit in w.
;   
;   Note:  : Negative logic - 0-Bits turn on the associated LED
;
Decode
  jmp pc+w

; Segments
;
;       dcgbe.fa
  retw %00100100                   ; 0
  retw %10101111                   ; 1
  retw %01000110                   ; 2
  retw %00001110                   ; 3
  retw %10001101                   ; 4
  retw %00011100                   ; 5
  retw %00010100                   ; 6
  retw %10101110                   ; 7
  retw %00000100                   ; 8
  retw %00001100                   ; 9
  retw %10000100                   ; A
  retw %00010101                   ; b
  retw %01110100                   ; C
  retw %00000111                   ; d
  retw %01010100                   ; E
  retw %11010100                   ; F

org     $100

;** Mainline program *******************************************
;
Main

include "Clr2x.inc"

  mov    rb, #$ff
  mov    !rb, #0                   ; Outputs for cathodes
  clr    rc
  mov    !rc, #%11000000           ; Outputs for anodes

  bank Leds
  mov  Column, #1                  ; Initialize the column mask
  mov  !option, #%10011111         ; Enable RTCC interrupt

  mov  Value,   #$ef
  mov  Value+1, #$cd
  mov  Value+2, #$ab

Loop
  jmp Loop

END
