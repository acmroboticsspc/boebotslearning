; APP007.SRC - PWM With Constant Period
;
; ---------------------------------------------------------------------
; Code for application example published in
; "Programming the SX Microcontroller", 2nd Edition by Guenther Daubach
; Copyright (c) by Parallax Inc. 2004
; ---------------------------------------------------------------------

include "Setup28.inc"
RESET   Main

org     $08
PwmAcc  ds 1                    ; Current value for pulse width
PwmVal  ds 1                    ; Contents determines pulse width
rbBuff  ds 1                    ; Buffer for Port B output
Timer   ds 1                    ; Delay counter (for demonstration
                                ;  purposes)
Incr    ds 1                    ; Increment value for demonstration

PwmPin  equ rbBuff.0            ; PWM bit in the buffer
Trigger equ rb.1                ; Trigger output for Oscilloscope

org     $000

;** PWM VP (constant frequency) ********************************

; This part of the ISR does the PWM part
;
  setb  Trigger                 ; Set oscilloscope trigger
  setb  PwmPin                  ; Set PWM bit in advance
  csb   PwmAcc, PwmVal          ; If PWM value reached, 
    clrb  PwmPin                ;   clear PWM bit
  inc   PwmAcc                  ; Increment current value
  mov   w, ++PwmAcc             ; Test if PwmAcc = 255
  snz                           ;  if so,
    clr PwmAcc                  ;  clear PwmAcc
  sz
    jmp :Exit
  
; This part of the ISR is for demonstration purposes only, it con-
; tinuously modifies the contents of PwmVal, i.e. the pulse width.
;
:Timers
  decsz Timer                   ; Decrement timer
    jmp :Exit                   ; If no underflow, continue 
  mov Timer, #15                ; Re-initialize the timer 
  add PwmVal, Incr              ; Increment or decrement PwmVal
  sz                            ; If PwmVal = 0 toggle increment/
    jmp :Exit                   ;  decrement
  sb Incr.7                     ; If increment = -1,
    jmp :Minus
  inc Incr                      ;  set it to
  inc Incr                      ;  +1
  jmp :Exit
:Minus
  dec Incr                      ; If increment = +1, set it
  dec Incr                      ;   to -1
  dec PwmVal                    ; Adjust PwmVal from 0
  dec PwmVal                    ;  to 254
;
; End of demo part

:Exit    
  mov   rb, rbBuff              ; Output port data
  clrb  Trigger                 ; Clear oscilloscope trigger
  mov   w, #-195
  retiw

org     $100

;** Mainline program *******************************************
;
Main
  mov   PwmVal, #0
  clr   PwmAcc
  clr   Timer
  clr   Timer+1
  mov   Incr, #1
  mov   !rb, #%11111100
  mov   !option,#%10011111      ; Enable RTCC interrupt

Loop
  jmp Loop

END
