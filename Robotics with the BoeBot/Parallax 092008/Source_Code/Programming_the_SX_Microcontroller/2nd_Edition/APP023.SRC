; APP023.SRC - A Software FIFO
;
; ---------------------------------------------------------------------
; Code for application example published in
; "Programming the SX Microcontroller", 2nd Edition by Guenther Daubach
; Copyright (c) by Parallax Inc. 2004
; ---------------------------------------------------------------------

include "Setup28.inc"
RESET   Main

org     $08
Head    ds 1                    ; FIFO head pointer
Tail    ds 1                    ; FIFO tail pointer
FIFOCnt ds 1                    ; Current number of items the FIFO
Temp    ds 2                    ; Temporary storage
FsrSave ds 1                    ; Temporary storage for FSR
TestVal ds 1                    ; Utility variables for testing

org     $30
FIFO    = $                     ; 16 bytes for FIFO memory
        ds 16
 
org     $000

;** Subroutine writes the contents of w into the FIFO
;
; Input:   w = value
;  
; Changes: Temp, FSRSave, Head, and FIFOCnt
;
WriteFIFO
  snb  FIFOCnt.4                ; If FIFO is "full", no action
    ret
  mov  Temp, w                  ; Save the value for later
  mov  FsrSave, fsr             ; Save the FSR
  mov  w, #FIFO                 ; Indirectly address the FIFO-Puffer
  add  w, Head                  ;   using the Head pointer
  mov  fsr, w
  mov  ind, Temp                ; Save the value to the FIFO
  inc  Head                     ; Point Head to next free storage
  clrb Head.4                   ; If Head = 16, "circle" around to 0
  inc  FIFOCnt                  ; Increment the item count
  mov  fsr, FsrSave             ; Restore the FSR
  ret

;** Subroutine reads the FIFO and returns the value in w
;
; Returns:  Value in w
;  
; Changes:  Temp+1, FSRSave, Tail, FIFOCnt
;
; NOTE:     Temp+1 is used for temporary storage of the retrieved
;           value here to avoid conflicts when ReadFIFO is called
;           from the mainline program and gets interrupted by the ISR,
;           calling WriteFIFO to store a new value.
;
ReadFIFO
  test FIFOCnt                  ; If FIFOCnt = 0, the
  snz                           ;  FIFO is "empty",
    ret                         ;  no action
  mov  FsrSave, fsr             ; Save the FSR
  mov  w, #FIFO                 ; Indirectly address the FIFO-Puffer
  add  w, Tail                  ;  using the Head pointer 
  mov  fsr, w                   ; 
  mov  Temp+1, ind              ; Read the value from the FIFO
  inc  Tail                     ; Set Tail to next location
  clrb Tail.4                   ; If Tail = 16, "circle" around to 0
  dec  FIFOCnt                  ; Decrement the item count
  mov  fsr, FsrSave             ; Restore the FSR
  mov  w, Temp+1                ; Copy the value to w
  ret

 
org     $100

;** Mainline program to test the FIFO **************************
;
Main

include "Clr2x.inc"

Loop
  inc  TestVal                  ; Generate test data
  mov w, TestVal
  call WriteFIFO                ; Write to FIFO 
  inc  TestVal                  ; Generate more test data 
  mov w, TestVal
  call WriteFIFO                ; Write to FIFO again

  clr w
  call ReadFIFO                 ; Read from FIFO
  jmp Loop                      ; Repeat forever...

END
