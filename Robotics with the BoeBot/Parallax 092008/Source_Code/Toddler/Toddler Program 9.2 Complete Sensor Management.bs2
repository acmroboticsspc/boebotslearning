' -----[ Title ]-----------------------------------------------------------
' Toddler Program 9.2 Complete Sensor Management.bs2
' This program has real time servo programming, inclinometer sensing
' Toddler bumper toes detection and infrared object detection
' {$STAMP BS2}
' {$PBASIC 2.5}

' -----[ I/O Definitions ]-------------------------------------------------

TiltServo       PIN     13              ' tilt servo on X7
StrideServo     PIN     12              ' stride servo on X6

LeftIRLED       PIN     4               ' left IRLED
RightIRLED      PIN     15              ' right IRLED
LeftIR_Sensor   PIN     11              ' left IR sensor input
RightIR_Sensor  PIN     14              ' right IR sensor input

Spkr            PIN     8               ' beeper pin
Yout            PIN     10              ' Yout from Memsic 2125

LeftBumper      PIN     2               ' bumper switch on left foot
RightBumper     PIN     1               ' bumper switch on right foot

LeftBumpPU      PIN     3               ' left bumper pull up
RightBumpPU     PIN     0               ' right bumper pull up

' Indicator LEDs are optional, but useful for seeing movements

LeftVisionLED   PIN     5               ' left vision display LED -
RightVisionLED  PIN     6               ' right vision display LED -

' -----[ Constants ]-------------------------------------------------------

MoveDelay       CON     0               ' in milliseconds - normally 20
                                        ' code is already using 30 ms

TiltStep        CON     5               ' experiment with this value

RightTilt       CON     500             ' tilt limits was 620
CenterTilt      CON     750
LeftTilt        CON     1000            ' was 880

StrideStep      CON     7               ' StrideServo step size

RightStride     CON     625             ' stride limits was 650
CenterStride    CON     750
LeftStride      CON     875             ' was 850

ctrlLEDs        CON     %1111           ' define DIRs as constants to 
prepBumper      CON     %1001           ' simplify LED/bumper setups

bothGreen       CON     %0110           ' OUTa register sets red/green
bothRed         CON     %1001           ' status on P0-P3 for Twinkle Toes
rightRed        CON     %0101           ' object detection states
leftRed         CON     %1010
bothLEDsOff     CON     %1001

Fwd             CON     0               ' codes to pick movement table
PivL            CON     1               ' set newMove to one of these
PivR            CON     2               ' values and New_Movemt will LOOKUP
BumpL           CON     3               ' the right movement table
BumpR           CON     4

escVal          CON     4               ' Indicator for excessive tilt

                                        ' Right and left depend on
                                        '  how you mounted the Memsic
                                        '  sensor. Below assume pins 1 & 6
                                        '  are toward front of Toddler.
                                        ' Use your values here
YAxisRtLimit    CON     2560            ' Right limit - was 2570 = 5.14 ms
YAxisLfLimit    CON     2460            ' left limit - was 2350 = 4.70 ms
                                        ' Yout center - is 2510 = 5.02 ms

' -----[ Variables ]-------------------------------------------------------

' Bit variable flags set so 1 causes the action to be taken
doneTiltFlag    VAR     Bit             ' Tilt servo reached new value
doneMoveFlag    VAR     Bit             ' Servos have reached new values
rightIR_Flag    VAR     Bit             ' See something on right side
leftIR_Flag     VAR     Bit             ' See something left side
rightBumpFlag   VAR     Bit             ' Bumper hit on right side
leftBumpFlag    VAR     Bit             ' Bumper hit on left side

sensors         VAR     Nib             ' Lower 2 bits of the sensors
                                        ' variable used to store IR values
currentMove     VAR     Nib
newMove         VAR     Nib

Counter         VAR     Nib             ' Filters tilt sensor output

Mx              VAR     Word            ' index for movement tables
MxOffset        VAR     Byte            ' added to Mx for index
bMovmnt         VAR     Byte            ' table value for movement lookup

currentTilt     VAR     Word
currentStride   VAR     Word
newTilt         VAR     Word
newStride       VAR     Word

Incline         VAR     Word            ' Pulses from Memsic 2125

' -----[ EEPROM Data ]-----------------------------------------------------
'
' These are actual values saved in the Basic Movement tables.

TL              CON     0               ' use lower nibble for these
TC              CON     1
TR              CON     2

SL              CON     3
SC              CON     4
SR              CON     5

xx              CON     255             ' table end code

' ------- Basic Movement Tables -------
'
' These tables contain Basic Movements consisting of bytes containing
' above Basic Movement Codes to describe movement sequences.
' An xx indicates the end of a list.
' Note that PivotLeft and PivotRight aren't necessarily entered at the
' of their tables

Forward         DATA    TR, SL, TL, SR, xx
PivotLeft       DATA    TR, SL, TL, SR
                DATA    TC, SL, TL, SR, xx
PivotRight      DATA    TR, SL, TL, SR
                DATA    TR, SL, TC, SR, xx
RBumper         DATA    SL, TR, SR, TC, SL, TL, SR, xx 
LBumper         DATA    SR, TL, SL, TC, SR, TR, SL, TL, SR, xx 

' -----[ Initialize ]------------------------------------------------------

  DIRS = ctrlLEDs
  OUTS = bothGreen
  GOSUB Clr_Vision                      ' reset vision LEDs and flags
  Counter = 0                           ' reset tilt filter

ResetFeet:
  newTilt = CenterTilt
  newStride = CenterStride
  currentTilt = CenterTilt
  currentStride = CenterStride

  FOR currentMove = 1 TO 15             ' center feet for .3 sec
    GOSUB Move_It                       ' currentMove is only a nibble
    PAUSE 15                            ' make up 20 ms servo refresh time
    NEXT

  'DEBUG "Forward = ", DEC Forward, cr
  'DEBUG "PivotLeft = ", DEC PivotLeft, CR, "PivotRight = "
  'DEBUG DEC PivotRight,CR
  'DEBUG "RBumper = ", DEC RBumper, CR, "LBumper = ", DEC LBumper, CR

  doneTiltFlag = 1
  doneMoveFlag = 1
  sensors = 0
  MxOffset = 0

  FREQOUT Spkr, 2000, 3000              ' program start/restart signal.
  rightBumpFlag = 0
  leftBumpFlag = 0

  currentMove = 15                      ' invalid value to assures start
  ' newMove = Fwd                       ' for testing single moves -
  ' newMove = PivL                      ' comment out GOSUBs to vision
  ' newMove = PivR                      ' and bump or the value might be
  ' newMove = BumpL                     ' overwritten
  ' newMove = BumpR


' -----[ Main Code ]-------------------------------------------------------

Main_Program:
  DO
    GOSUB Do_Vision                     ' look for obstacles with IR
    GOSUB Do_Bumper                     ' check for obstacles with bumpers
    GOSUB New_Movemt                    ' generates next move from table
    GOSUB Do_Movement                   ' gives servo pulses out
    'PAUSE MoveDelay                    ' no pause required because the
                                        ' PBASIC code is using 30 ms
  LOOP
END

' -----[ Subroutines ]-----------------------------------------------------

Do_Vision:

  FREQOUT LeftIRLED,1,38500             ' pulse left IRLED.
  sensors.BIT0 = LeftIR_Sensor          ' store IR detector output in RAM.

  FREQOUT RightIRLED,1,38500            ' repeat for the right IR pair.
  sensors.BIT1 = RightIR_Sensor

                                        ' check if currently doing IR move
  IF ((leftIR_Flag = 1) & (rightIR_Flag = 1)) THEN See_Both
  IF (leftIR_Flag = 1) THEN See_Left    ' is left only?
  IF (rightIR_Flag = 1) THEN See_Right  ' is right only?

  ' Load IR detector output values into the lower 2 bits of the sensors
  ' variable, storing a number between 0 and 3 that the BRANCH command
  ' can execute the appropriate routine.

  BRANCH sensors,[See_Both,See_Right,See_Left,See_None]

See_Both:
  newMove = PivR
  rightIR_Flag = 1                      ' flag: 1 = something on right side
  leftIR_Flag = 1                       ' flag: 1 = see something left side
  HIGH  LeftVisionLED                   ' left vision sequence display LED
  HIGH  RightVisionLED                  ' right vision sequence display LED
  RETURN

See_Right:
  newMove = PivL
  rightIR_Flag = 1                      ' flag: 1 = something on right side
  HIGH  RightVisionLED                  ' right vision sequence display LED
  RETURN

See_Left:
  newMove = PivR
  leftIR_Flag = 1                       ' flag: 1 = something left side
  HIGH  LeftVisionLED                   ' left vision sequence display LED
  RETURN

See_None:
  newMove = Fwd
  RETURN

'---------------

Do_Bumper:
  DIRS = prepBumper
  OUTS = bothLEDsOff
  ' Bumpers on each foot. A hit causes Toddler to back and turn.
  ' Code asssumes leg that hit is on the leg that is moving
  ' (while leaning on the other leg).
  ' A hit backs up the hit leg right away then steps back 1 step
  '  and does a pivot away.

  IF (leftBumpFlag = 1) THEN Bump_LeftA
  IF (rightBumpFlag = 1) THEN Bump_RightA

  ' check for old bumper hit on left
  ' check for old bumper hit on right

  IF (LeftBumper = 0) THEN Bump_Left
  IF (RightBumper = 0) THEN Bump_Right
  DIRs = ctrlLEDs
  OUTS = bothGreen

  RETURN

Bump_Left:
  'DEBUG "bump left", CR                ' sends only once on change

Bump_LeftA:
  leftBumpFlag = 1                      ' flag indicates bump response move
  newMove = BumpL
  DIRS = ctrlLEDs
  OUTS = leftRed
  GOTO Clr_Vision                       ' goes to Clr_Vision

Bump_Right:
  'DEBUG "bump right", CR

Bump_RightA:
  rightBumpFlag = 1
  newMove = BumpR
  DIRS = ctrlLEDs
  OUTS = rightRed
                                        ' falls through to Clr_Vision
'---------------

Clr_Vision:                             ' reset vision LEDs and flags

  rightIR_Flag = 0                      ' flag: 1 = something on right side
  leftIR_Flag = 0                       ' flag: 1 = something left side
  LOW   LeftVisionLED                   ' left vision sequence display LED
  LOW   RightVisionLED                  ' right vision sequence display LED
  RETURN

'---------------

New_Movemt:                             ' sequence for forward motion

  IF (newMove <> currentMove) THEN      ' if new movement visit DATA table

    'DEBUG CR, "start NewMovemt; newMove = ", DEC newMove
    'DEBUG ", currentMove = ", DEC currentMove, CR

    doneMoveFlag = 1                    ' stop current move wherever it is
    currentMove = newMove

    ' When customizing the program, here is where to integrate between
    ' moves. You can make the transitions reasonable by using the existing
    ' Mx value and MxOffset to compute the proper MxOffset to start into
    ' the next move.

    IF ((newMove = Fwd) OR (newMove = BumpL) OR (newMove = BumpR)) THEN
      MxOffset = 0                      ' reset MxOffset value for new move
    ENDIF
        ' note: kept old MxOffset value for lead into pivot left or right

    LOOKUP newMove,[Forward,PivotLeft,PivotRight,LBumper,RBumper],Mx
                                        ' lookup movement table index
  ENDIF

  IF (doneMoveFlag = 1) THEN            ' done - lookup new move in table
    Counter = 0                         ' reset tilt filter
    READ (Mx + MxOffset), bMovmnt       ' read next basic move byte
    'DEBUG "Mx = ", DEC Mx, ", MxOffset = ", DEC MxOffset
    MxOffset = MxOffset + 1

    IF (bMovmnt < xx) THEN              ' end code so do new move
      'DEBUG "  bMovmnt = ", DEC bMovmnt, "  "

      SELECT bMovmnt                    ' set and display movement type
        CASE TL  : newTilt = LeftTilt           : 'DEBUG "TL, ", CR
        CASE TC  : newTilt = CenterTilt         : 'DEBUG "TC, ", CR
        CASE TR  : newTilt = RightTilt          : 'DEBUG "TR, ", CR
        CASE SL  : newStride = LeftStride       : 'DEBUG "SL, ", CR
        CASE SC  : newStride = CenterStride     : 'DEBUG "SC, ", CR
        CASE SR  : newStride = RightStride      : 'DEBUG "SR, ", CR
      ENDSELECT
                                ' will fall through if invalid index
    ELSE
      'DEBUG "  xx = finished table", CR, CR
      MxOffset = 0                      ' finished move sequence so restart
      leftBumpFlag = 0                  ' clear out left bumper hit flag
      rightBumpFlag = 0                 ' right too
      DIRS = ctrlLEDs
      OUTS = bothGreen
      GOSUB Clr_Vision                  ' reset vision LEDs and flags
      GOSUB Do_Vision                   ' previous movement done figure out
      GOSUB Do_Bumper                   ' new movement
      GOTO New_Movemt                   ' restart this subroutine to get
    ENDIF                               ' new table and offset

  ENDIF

  RETURN                                ' ignore if invalid

'---------------

Do_Movement:

  doneMoveFlag = 0                      ' reset flags
  doneTiltFlag = 0

  IF (currentTilt = newTilt) THEN
        doneTiltFlag = 1                ' Tilt is correct already
        Counter = 0
        PAUSE 1                         ' Get servo loop out to 20 ms
  ELSE
    IF (currentTilt < newTilt) THEN     ' start tilt calculations
      currentTilt = currentTilt + TiltStep
                                        ' from right tilt = increment
      PULSIN Yout,1,Incline
      'DEBUG "Incline = ", DEC Incline, CR
      IF Incline < YAxisLfLimit THEN
        Counter = Counter + 1
        'DEBUG "Counter = ", DEC Counter, CR
      ENDIF
      IF Counter > escVal THEN
        newTilt = currentTilt           ' at limit of tilt, move no more
      ENDIF
      IF currentTilt >= newTilt THEN
        currentTilt = newTilt           ' correct if overshot tilt
        doneTiltFlag = 1
        Counter = 0
      ENDIF
    ELSE
      currentTilt = currentTilt - TiltStep
                                        ' from left tilt = decrement
      PULSIN Yout,1,Incline
      'DEBUG "Incline = ", DEC Incline, CR
      IF Incline > YAxisRtLimit THEN
        Counter = Counter + 1
        'DEBUG "Counter = ", DEC Counter, CR
      ENDIF
      IF Counter > escVal  THEN newTilt = currentTilt
      IF currentTilt <= newTilt THEN
        currentTilt = newTilt           ' stop at limit of tilt
        doneTiltFlag = 1
        Counter = 0
      ENDIF
    ENDIF
  ENDIF

Move_Stride:

  IF (currentStride < newStride) THEN
    currentStride = currentStride + StrideStep
                                        ' from right stride = increment
    IF (currentStride >= newStride) THEN
      currentStride = newStride
      IF (doneTiltFlag = 1) THEN doneMoveFlag = 1
                                        ' uses doneMoveFlag to increment
                                        ' states
    ENDIF
  ELSE
    currentStride = currentStride - StrideStep
                                        ' from left stride = decrement
    IF (currentStride <= newStride) THEN' jump if still moving
      currentStride = newStride
      IF (doneTiltFlag = 1) THEN doneMoveFlag = 1
                                        ' uses doneMoveFlag to increment
    ENDIF                               ' states
  ENDIF

Move_It:
  PULSOUT TiltServo,   currentTilt
  PULSOUT StrideServo, currentStride
  RETURN