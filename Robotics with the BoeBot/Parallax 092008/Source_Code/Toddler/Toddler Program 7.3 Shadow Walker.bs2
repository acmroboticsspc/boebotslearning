' -----[ Title ]-----------------------------------------------------------
' Toddler Program 7.3: Shadow Walker
' Follows another Toddler with a piece of paper on his backside
' {$STAMP BS2}
' {$PBASIC 2.5}

' -----[ I/O Definitions ]-------------------------------------------------

StrideServo     CON     12              ' Stride servo on P12
TiltServo       CON     13              ' Tilt servo on P13

left_pin        CON     4
right_pin       CON     15

left_in         VAR     IN11
right_in        VAR     IN14

' -----[ Constants ]-------------------------------------------------------

MoveDelay       CON     25              ' in micrcoseconds

TiltStep        CON     20              ' TiltServo step size
StrideStep      CON     20              ' StrideServo step size

RightTilt       CON     630             ' Tilt limits
CenterTilt      CON     750
LeftTilt        CON     870

RightStride     CON     650             ' Stride limits
CenterStride    CON     750
LeftStride      CON     850

' -----[ Variables ]-------------------------------------------------------

FigureLoop      VAR     Nib
MoveLoop        VAR     Byte            ' Loop for repeat movements
MoveLoopLimit   VAR     Byte

SubMoveLoop     VAR     Byte            ' Loop for repeat submovements
SubMoveLoopLmt  VAR     Byte

Pulses          VAR     Word            ' Pulse variable
CurrentTilt     VAR     Word
CurrentStride   VAR     Word
NewValue        VAR     Word

Dx              VAR     Pulses

Mx              VAR     Word
MxCurrent       VAR     Word

Sx              VAR     Word
SxCurrent       VAR     Word

counter         VAR     Nib             ' For...next loop index variable.
l_values        VAR     Mx              ' store R sensor vals 
r_values        VAR     Sx              ' store L sensor vals 
l_IR_freq       VAR     MxCurrent       ' stores L IR frequencies.
r_IR_freq       VAR     SxCurrent       ' stores R IR frequencies 

' -----[ Movement Support Codes ]------------------------------------------
'
' The following state tables are lists of movement state numbers.
' A xx indicates the end of a list.
' These are used with the Movement routine.

TL              CON     0
TC              CON     1
TR              CON     2

SL              CON     3
SC              CON     4
SR              CON     5

xx              CON     255


' -----[ EEPROM Data ]-----------------------------------------------------
'
' ------ Movement Value Tables ------
' These can be used with the Movement routine.
' The tables can contain Basic Movement Codes.
'
' Note: ALL movement tables must be in this section

TurnLeftForward         DATA            1, bLeftTurn,  bForward, xx
TurnRightForward        DATA            1, bRightTurn, bForward, xx

PivotLeftForward        DATA            1, bPivotLeft,  bForward, xx
PivotRightForward       DATA            1, bPivotRight, bForward, xx

BackwardPivotLeft       DATA            1, bBackward, bPivotLeft,  xx
BackwardPivotRight      DATA            1, bBackward, bPivotRight, xx

Forward2                DATA            2, bForward, xx
Backward2               DATA            2, bBackward, xx


' ------ Basic Movement Codes ------
'
' Used in Movement tables.
' Referenced below using LOOKUP statement.

bFinish         CON     0                     
bForward        CON     1                     
bBackward       CON     2                     
bLeftTurn       CON     3                     
bRightTurn      CON     4                     
bPivotLeft      CON     5                     
bPivotRight     CON     6                     


' ------ Basic Movement Tables ------
'
' These tables can contain Movement Support Codes.

BasicMovements  CON     Forward

Nop             DATA    1, xx

Forward         DATA    1, TR, SL, TL, SR, xx
Backward        DATA    1, TR, SR, TL, SL, xx

LeftTurn        DATA    1, TL, SR, TC, SL, TL, SR, TR, SL, xx
RightTurn       DATA    1, TR, SL, TC, SR, TR, SL, TL, SR, xx

PivotLeft       DATA    3, TL, SR, TC, SL, TR, SR, TC, SL, xx
PivotRight      DATA    3, TR, SL, TC, SR, TL, SL, TC, SR, xx

Finish          DATA    1, TR, SC, TC, xx

'----- Movement LOOKUP entries  --------------
'
' These constants should reference the appropriate movement table.
' The constant syntax is lxry where x and y indicate the range from the
' left and right sensor respectively. A zero value indicates nothing
' is within range while a 5 indicates an object is within inches.
' In general, a 3 will be the closest desirable distance.

l0r0    CON     Forward
l0r1    CON     TurnRightForward
l0r2    CON     PivotRightForward
l0r3    CON     PivotRight
l0r4    CON     RightTurn
l0r5    CON     BackwardPivotRight

l1r0    CON     PivotLeftForward
l1r1    CON     Forward
l1r2    CON     PivotRightForward
l1r3    CON     PivotRight
l1r4    CON     PivotRight
l1r5    CON     BackwardPivotRight

l2r0    CON     TurnLeftForward
l2r1    CON     TurnLeftForward
l2r2    CON     Forward
l2r3    CON     Nop
l2r4    CON     PivotRight
l2r5    CON     BackwardPivotRight

l3r0    CON     PivotLeft
l3r1    CON     PivotLeft
l3r2    CON     Nop
l3r3    CON     Nop
l3r4    CON     Nop
l3r5    CON     BackwardPivotRight

l4r0    CON     BackwardPivotLeft
l4r1    CON     BackwardPivotLeft
l4r2    CON     PivotLeft
l4r3    CON     Nop
l4r4    CON     Backward
l4r5    CON     Backward

l5r0    CON     BackwardPivotLeft
l5r1    CON     BackwardPivotLeft
l5r2    CON     BackwardPivotLeft
l5r3    CON     BackwardPivotLeft
l5r4    CON     Backward
l5r5    CON     Backward

'----- Initialization ------------

   OUTPUT 2                             ' Declare outputs.
   OUTPUT left_pin
   OUTPUT right_pin

   FREQOUT 2,500,3000                   ' Beep at startup.

   GOSUB ResetCC

'----- Main Routine --------------

main:                                   ' Main routine

  GOSUB check_sensors                   ' Distance values for each sensor

 'debug "l",dec l_values,"r", dec r_values,cr

  BRANCH l_values,[left0,left1,left2,left3,left4,left5]

  left0:
     LOOKUP r_values,[l0r0,l0r1,l0r2,l0r3,l0r4,l0r5],Mx
     GOTO main_movement

  left1:
     LOOKUP r_values,[l1r0,l1r1,l1r2,l1r3,l1r4,l1r5],Mx
     GOTO main_movement

  left2:
     LOOKUP r_values,[l2r0,l2r1,l2r2,l2r3,l2r4,l2r5],Mx
     GOTO main_movement

  left3:
     LOOKUP r_values,[l3r0,l3r1,l3r2,l3r3,l3r4,l3r5],Mx
     GOTO main_movement

  left4:
     LOOKUP r_values,[l4r0,l4r1,l4r2,l4r3,l4r4,l4r5],Mx
     GOTO main_movement

  left5:
    LOOKUP r_values,[l5r0,l5r1,l5r2,l5r3,l5r4,l5r5],Mx

main_movement:
  GOSUB Movement
  GOTO main                             ' Infinite loop.


'----- Subroutine(s) -------------

check_sensors:

  l_values = 0                          ' Set distances to 0.
  r_values = 0
  ' Take 5 measurements for distance at each IR pair.  If you fine tuned
  ' frequencies in Activity #2, insert them in the lookup tables.

  FOR counter = 0 TO 4
    check_left_sensors:
      LOOKUP counter,[37500,38250,39500,40500,41000],l_IR_freq
      FREQOUT left_pin,1,l_IR_freq
      l_values.LOWBIT(counter) = ~left_in

    check_right_sensors:
      LOOKUP counter,[37500,38250,39500,40500,41000],r_IR_freq
      FREQOUT right_pin,1,r_IR_freq
      r_values.LOWBIT(counter) = ~right_in

  NEXT

  l_values = NCD l_values               ' Value for distance depends on MSB
  r_values = NCD r_values

RETURN

' ----- Movement: Move feet using DATA table referenced by Mx -----
'
' Input: Mx = movement table index, table ends in xx
'    or
'        Mx = submovement table index, table ends in xx
'
' Note: All submovment tables come after the movment tables in this file.

Movement:
  IF Mx < BasicMovements THEN SetupMovement

  MxCurrent = Mx                        ' setup to use submovement table
  MoveLoopLimit = 1
  GOTO StartMovement

SetupMovement:
  READ Mx, MoveLoopLimit                ' read movement table repeat count
  MxCurrent = Mx + 1

StartMovement:
  FOR MoveLoop = 1 TO MoveLoopLimit
    Mx = MxCurrent                      ' Mx = start of movement table

 'debug hex Mx, " Movement ", dec MoveLoop, " of ", dec MoveLoopLimit,cr

    IF Mx < BasicMovements THEN MovementLoop
                                        ' skip if movement table
    SxCurrent = Mx                      ' SxCurrent = submovement index
    GOTO StartSubMovement               ' enter middle of loop

    MovementLoop:
    READ Mx, SxCurrent                  ' read next submovment byte
    Mx = Mx + 1
    IF SxCurrent = xx THEN MovementDone
                                        ' skip if end of list
 'debug "  ", hex SxCurrent, " movement",cr
    LOOKUP SxCurrent,[Finish,Forward,Backward,LeftTurn,RightTurn,
    PivotLeft,PivotRight],SxCurrent
                                        ' lookup submovement table index
StartSubMovement:                       ' start executing submovement table
    READ SxCurrent, SubMoveLoopLmt
                                        ' read submovement table repeat count
    SxCurrent = SxCurrent + 1

    FOR SubMoveLoop = 1 TO SubMoveLoopLmt
      Sx = SxCurrent
 'debug "   ", hex Sx, " submovement ", dec SubMoveLoop, " of "
 'debug dec SubMoveLoopLmt,cr

      SubMovementLoop:
        READ Sx, Dx                     ' read next submovent action
        Sx = Sx + 1
        IF Dx = xx THEN SubMovementDone
                                        ' skip if end of list
        GOSUB DoMovement                ' execute movement
        GOTO SubMovementLoop

      SubMovementDone:
    NEXT
    IF Mx < BasicMovements THEN MovementLoop
                                        ' exit if submovement table
    MovementDone:
  NEXT
  RETURN

  DoMovement:
 'debug "    ", dec Dx, " action",cr
  BRANCH Dx,[TiltLeft,TiltCenter,TiltRight,StrideLeft,
  StrideCenter,StrideRight]
                                        ' will fall through if invalid index
  RETURN


' ----  Movement routines can be called directly ----

TiltLeft:
  NewValue = LeftTilt
  GOTO MovementTilt

TiltCenter:
  NewValue = CenterTilt
  GOTO MovementTilt

TiltRight:
  NewValue = RightTilt

MovementTilt:
  FOR Pulses = CurrentTilt TO NewValue STEP TiltStep
    PULSOUT TiltServo,   Pulses
    PULSOUT StrideServo, CurrentStride
    PAUSE MoveDelay
  NEXT

  CurrentTilt = NewValue
  RETURN


StrideLeft:
  NewValue = LeftStride
  GOTO MovementStride

StrideCenter:
  NewValue = CenterStride
  GOTO MovementStride

StrideRight:
  NewValue = RightStride

MovementStride:
  FOR Pulses = CurrentStride TO NewValue STEP StrideStep
    PULSOUT TiltServo,   CurrentTilt
    PULSOUT StrideServo, Pulses
    PAUSE MoveDelay
  NEXT

  CurrentStride = NewValue
  RETURN


' ----- Move feet to initial center position -----

ResetCC:
  CurrentTilt   = CenterTilt
  CurrentStride = CenterStride

  FOR Pulses = 1 TO 100 STEP StrideStep
    PULSOUT TiltServo, CenterTilt
    PULSOUT StrideServo, CenterStride
    PAUSE MoveDelay
  NEXT

DoReturn:
RETURN