' ==============================================================================
'
'   File...... TALK_BOT.BS2
'   Purpose... Talking Avoider BOE-Bot
'   Author.... Parallax
'   E-mail.... stamptech@parallaxinc.com
'   Started...
'   Updated... 01 MAY 2002
'
'   {$STAMP BS2}
'
' ==============================================================================


' ------------------------------------------------------------------------------
' Program Description
' ------------------------------------------------------------------------------

' Talking avoider robot.  Will roam around a room, avoiding objects and talking
' and making sounds as it does.  The miscellaneous robot sound effects were
' contributed by a member of the BASIC Stamps mailing list.
'
' The BOE reset button is used to toggle the robot on and off.
'
' Note: To prvent conflicts, this program uses a slightly different wiring
' scheme than the standard IR Avoider Bot.


' ------------------------------------------------------------------------------
' Revision History
' ------------------------------------------------------------------------------


' ------------------------------------------------------------------------------
' I/O Definitions
' ------------------------------------------------------------------------------

LMotor          CON     15                      ' left servo control
RMotor          CON     14                      ' right servo control

QV_SIO          CON     11                      ' serial I/O for QV356
QV_Busy         VAR     In11                    ' high when QV356 is busy
Mix_Out         CON     10                      ' output to QV356 mixer

LIR_out         CON     3                       ' left IR LED
LIR_in          VAR     In2                     ' left IR detector
RIR_out         CON     1                       ' right IR LED
RIR_in          VAR     In0                     ' right IR detector


' ------------------------------------------------------------------------------
' Constants
' ------------------------------------------------------------------------------

' motor controls

LStop           CON     750                     ' left motor stop
LSlow           CON     775                     ' left motor slow foward
LFwd            CON     950                     ' left motor full forward
LRev            CON     550                     ' left motor revers

RStop           CON     750                     ' right motor stop
RSlow           CON     725                     ' right motor slow forward
RFwd            CON     550                     ' right motor full forward
RRev            CON     950                     ' right motor revers

' QV356 controls

QV_Direct       CON     $F0                     ' play mode
QV_MixOn        CON     $F1                     ' enable mix of pin 10 sounds
QV_SetRate      CON     $F2                     ' set sample rate (0..3)
QV_MixOff       CON     $F3                     ' disable mix of pin 10 sounds
QV_Record       CON     $F4                     ' record mode (do not use)
QV_PlayUsr      CON     $F5                     ' play user message
QV_Stop         CON     $F6                     ' stop playback
QV_RecUsr       CON     $F7                     ' record user message
QV_Sleep        CON     $F8                     ' power down
QV_OpenStr      CON     $F9                     ' open string
QV_CloseStr     CON     $FA                     ' close string
QV_PlayStr      CON     $FB                     ' play string
QV_Volume       CON     $FC                     ' set volume (0..7)
QV_Reset        CON     $FD                     ' software reset

QV_80k          CON     $00                     '  - 8.0 kHz (best quality)
QV_64k          CON     $01                     '  - 6.4 kHz
QV_53k          CON     $02                     '  - 5.3 kHz
QV_40k          CON     $03                     '  - 4.0 kHz

QV_RecOn        CON     $01                     ' start recording
QV_RecOff       CON     $00                     ' stop recording

N2400           CON     16780                   ' 2400-8-N-1, inverted (QV356)

Std_Volume      CON     5                       ' good volume for robot


' ------------------------------------------------------------------------------
' QV356M4 Standard Vocabulary
' ------------------------------------------------------------------------------

_0              CON       0                     ' 0f.wav
_1              CON       1                     ' 1f.wav
_2              CON       2                     ' 2f.wav
_3              CON       3                     ' 3f.wav
_4              CON       4                     ' 4f.wav
_5              CON       5                     ' 5f.wav
_6              CON       6                     ' 6f.wav
_7              CON       7                     ' 7f.wav
_8              CON       8                     ' 8f.wav
_9              CON       9                     ' 9f.wav
_10             CON      10                     ' 10f.wav
_11             CON      11                     ' 11f.wav
_12             CON      12                     ' 12f.wav
_13             CON      13                     ' 13f.wav
_14             CON      14                     ' 14f.wav
_15             CON      15                     ' 15f.wav
_16             CON      16                     ' 16f.wav
_17             CON      17                     ' 17f.wav
_18             CON      18                     ' 18f.wav
_19             CON      19                     ' 19f.wav
_20             CON      20                     ' 20f.wav
_30             CON      21                     ' 30f.wav
_40             CON      22                     ' 40f.wav
_50             CON      23                     ' 50f.wav
_60             CON      24                     ' 60f.wav
_70             CON      25                     ' 70f.wav
_80             CON      26                     ' 80f.wav
_90             CON      27                     ' 90f.wav
_100            CON      28                     ' 100seq.wav
_1000           CON      29                     ' 1000seq.wav
_million        CON      30                     ' 10e6seq.wav
_billion        CON      31                     ' 10e9seq.wav
_2000           CON      32                     ' 2000.wav
_about          CON      33                     ' about.wav
_accelerate     CON      34                     ' accelerate.wav
_accelerating   CON      35                     ' accelerating.wav
_acquire        CON      36                     ' acquire.wav
_acquiring      CON      37                     ' acquiring.wav
_activated      CON      38                     ' activated.wav
_active         CON      39                     ' active.wav
_aft            CON      40                     ' aft.wav
_all            CON      41                     ' all.wav
_am             CON      42                     ' am.wav
_amps           CON      43                     ' amps.wav
_area           CON      44                     ' area.wav
_assistance     CON      45                     ' assistance.wav
_attempted      CON      46                     ' attempted.wav
_attempting     CON      47                     ' attempting.wav
_attempts       CON      48                     ' attempts.wav
_back           CON      49                     ' back.wav
_base           CON      50                     ' base.wav
_battery        CON      51                     ' battery.wav
_begin          CON      52                     ' begin.wav
_bit            CON      53                     ' bit.wav
_bits           CON      54                     ' bits.wav
_bump           CON      55                     ' bump.wav
_byte           CON      56                     ' byte.wav
_bytes          CON      57                     ' bytes.wav
_calibrate      CON      58                     ' calibrate.wav
_calibrating    CON      59                     ' calibrating.wav
_calibration    CON      60                     ' calibration.wav
_can            CON      61                     ' can.wav
_centimeters    CON      62                     ' centimeters.wav
_charge         CON      63                     ' charge.wav
_charging       CON      64                     ' charging.wav
_check          CON      65                     ' check.wav
_clean          CON      66                     ' clean.wav
_close          CON      67                     ' close.wav
_close1         CON      68                     ' close1.wav
_closed         CON      69                     ' closed.wav
_closing        CON      70                     ' closing.wav
_complete       CON      71                     ' complete.wav
_connect        CON      72                     ' connect.wav
_connecting     CON      73                     ' connecting.wav
_connection     CON      74                     ' connection.wav
_corrupt        CON      75                     ' corrupt.wav
_course         CON      76                     ' course.wav
_dark           CON      77                     ' dark.wav
_deactivated    CON      78                     ' deactivated.wav
_deactivating   CON      79                     ' deactivating.wav
_decelerate     CON      80                     ' decelerate.wav
_decelerating   CON      81                     ' decelerating.wav
_decrease       CON      82                     ' decrease.wav
_decreasing     CON      83                     ' decreasing.wav
_detect         CON      84                     ' detect.wav
_detected       CON      85                     ' detected.wav
_dirty          CON      86                     ' dirty.wav
_disabled       CON      87                     ' disabled.wav
_disabling      CON      88                     ' disabling.wav
_down           CON      89                     ' down.wav
_empty          CON      90                     ' empty.wav
_enabled        CON      91                     ' enabled.wav
_enabling       CON      92                     ' enabling.wav
_encoder        CON      93                     ' encoder.wav
_end            CON      94                     ' end.wav
_error          CON      95                     ' error.wav
_excuse_me      CON      96                     ' excuse me.wav
_fail           CON      97                     ' fail.wav
_failed         CON      98                     ' failed.wav
_fast           CON      99                     ' fast.wav
_feet           CON     100                     ' feet.wav
_fire           CON     101                     ' fire.wav
_flame          CON     102                     ' flame.wav
_follow         CON     103                     ' follow.wav
_following      CON     104                     ' following.wav
_for            CON     105                     ' for.wav
_forward        CON     106                     ' forward.wav
_found          CON     107                     ' found.wav
_full           CON     108                     ' full.wav
_functioning    CON     109                     ' functioning.wav
_good_bye       CON     110                     ' good-bye.wav
_halt           CON     111                     ' halt.wav
_has            CON     112                     ' has.wav
_heat           CON     113                     ' heat.wav
_hello          CON     114                     ' hello.wav
_help           CON     115                     ' help.wav
_high           CON     116                     ' high.wav
_I              CON     117                     ' I.wav
_in             CON     118                     ' in.wav
_inches         CON     119                     ' inches.wav
_increase       CON     120                     ' increase.wav
_increasing     CON     121                     ' increasing.wav
_infrared       CON     122                     ' infrared.wav
_input          CON     123                     ' input.wav
_inside         CON     124                     ' inside.wav
_is             CON     125                     ' is.wav
_left           CON     126                     ' left.wav
_leg            CON     127                     ' leg.wav
_legs           CON     128                     ' legs.wav
_light          CON     129                     ' light.wav
_line           CON     130                     ' line.wav
_locate         CON     131                     ' locate.wav
_located        CON     132                     ' located.wav
_locating       CON     133                     ' locating.wav
_lost           CON     134                     ' lost.wav
_low            CON     135                     ' low.wav
_lower          CON     136                     ' lower.wav
_main           CON     137                     ' main.wav
_maximum        CON     138                     ' maximum.wav
_meters         CON     139                     ' meters.wav
_method         CON     140                     ' method.wav
_minimum        CON     141                     ' minimum.wav
_mode           CON     142                     ' mode.wav
_motor          CON     143                     ' motor.wav
_motors         CON     144                     ' motors.wav
_moving         CON     145                     ' moving.wav
_my             CON     146                     ' my.wav
_need           CON     147                     ' need.wav
_no             CON     148                     ' no.wav
_not            CON     149                     ' not.wav
_object         CON     150                     ' object.wav
_objects        CON     151                     ' objects.wav
_of             CON     152                     ' of.wav
_okay           CON     153                     ' okay.wav
_oops           CON     154                     ' oops!.wav
_open           CON     155                     ' open.wav
_opening        CON     156                     ' opening.wav
_operate        CON     157                     ' operate.wav
_operating      CON     158                     ' operating.wav
_opponent       CON     159                     ' opponent.wav
_ouch           CON     160                     ' ouch!.wav
_output         CON     161                     ' output.wav
_outside        CON     162                     ' outside.wav
_passed         CON     163                     ' passed.wav
_point          CON     164                     ' point.wav
_possible       CON     165                     ' possible.wav
_primary        CON     166                     ' primary.wav
_probable       CON     167                     ' probable.wav
_program        CON     168                     ' program.wav
_program1       CON     169                     ' program1.wav
_proper         CON     170                     ' proper.wav
_properly       CON     171                     ' properly.wav
_proximity      CON     172                     ' proximity.wav
_raise          CON     173                     ' raise.wav
_ready          CON     174                     ' ready.wav
_rear           CON     175                     ' rear.wav
_reverse        CON     176                     ' reverse.wav
_right          CON     177                     ' right.wav
_room           CON     178                     ' room.wav
_run            CON     179                     ' run.wav
_running        CON     180                     ' running.wav
_scan           CON     181                     ' scan.wav
_scanning       CON     182                     ' scanning.wav
_search         CON     183                     ' search .wav
_searching      CON     184                     ' searching.wav
_secondary      CON     185                     ' secondary.wav
_seek           CON     186                     ' seek.wav
_seeking        CON     187                     ' seeking.wav
_sensor         CON     188                     ' sensor.wav
_sensors        CON     189                     ' sensors.wav
_servo          CON     190                     ' servo.wav
_servos         CON     191                     ' servos.wav
_slipping       CON     192                     ' slipping.wav
_slow           CON     193                     ' slow.wav
_slowing        CON     194                     ' slowing.wav
_sonar          CON     195                     ' sonar.wav
_stall          CON     196                     ' stall.wav
_stalled        CON     197                     ' stalled.wav
_station        CON     198                     ' station.wav
_stop           CON     199                     ' stop.wav
_stuck          CON     200                     ' stuck.wav
_subject        CON     201                     ' subject.wav
_system         CON     202                     ' system.wav
_systems        CON     203                     ' systems.wav
_target         CON     204                     ' target.wav
_to             CON     205                     ' to.wav
_track          CON     206                     ' track.wav
_tracks         CON     207                     ' tracks.wav
_turn           CON     208                     ' turn.wav
_turning        CON     209                     ' turning.wav
_uh_oh          CON     210                     ' uh_oh.wav
_up             CON     211                     ' up.wav
_volts          CON     212                     ' volts.wav
_wall           CON     213                     ' wall.wav
_wheel          CON     214                     ' wheel.wav
_wheels         CON     215                     ' wheels.wav
_whisker        CON     216                     ' whisker.wav
_will_i_dream   CON     217                     ' will I dream.wav
_word           CON     218                     ' word.wav
_words          CON     219                     ' words.wav

LastPhrase      CON     219


' ------------------------------------------------------------------------------
' Variables
' ------------------------------------------------------------------------------

irBits          VAR     Nib                     ' object detection inputs
irLeft          VAR     irBits.Bit1
irRight         VAR     irBits.Bit0
lSpeed          VAR     Word                    ' left motor speed
rSpeed          VAR     Word                    ' right motor speed
tix             VAR     Byte                    ' timer

qvData          VAR     Byte                    ' data for module
eeAddr          VAR     Word                    ' ee address of word
freq1           VAR     Word                    ' tone for sound fx
freq2           VAR     Word                    ' tone for sound fx
squak           VAR     Word


' ------------------------------------------------------------------------------
' EEPROM Data
' ------------------------------------------------------------------------------

RunStatus       DATA    $00

ObjectLeft      DATA    _object, _detected, _turning, _right, $FF
ObjectRight     DATA    _object, _detected, _turning, _left, $FF
ObjectFront     DATA    _oops, _excuse_me, $FF


' ------------------------------------------------------------------------------
' Initialization
' ------------------------------------------------------------------------------

Run_Check:                                      ' user Reset button as On-Off
  READ RunStatus, qvData                        ' read current status
  qvData = ~qvData                              ' invert status
  WRITE RunStatus, qvData                       ' save status for next reset
  IF (qvData = 0) THEN Initialize               ' run now?
  END                                           ' no ... next time


Initialize:
  SEROUT QV_SIO, N2400, [QV_Reset]              ' reset sound board
  PAUSE 500                                     ' required -- do not change
  SEROUT QV_SIO, N2400, [QV_Volume, Std_Volume] ' set initial volume
  PAUSE 5

Fanfare:
  SEROUT QV_SIO, N2400, [QV_MixOn]              ' enable Stamp sounds
  PAUSE 5

  FOR freq1 = 5 TO 5000 STEP 5                  ' frequency sweep up
    FREQOUT Mix_Out, 10, freq1, freq1 */ 323    ' simple chord (1st + 3rd)
  NEXT
  FOR freq1 = 5000 TO 5 STEP 50                 ' frequency sweep down
    FREQOUT Mix_Out, 10, freq1, freq1 */ 323
  NEXT

  SEROUT QV_SIO, N2400, [_running]
  GOSUB RoboSFX_0


' ------------------------------------------------------------------------------
' Program Code
' ------------------------------------------------------------------------------

Main:
  GOSUB Scan_IR                                 ' look for objects
  BRANCH irBits, [Forward, Left, Right, Around] ' branch to movement routine
  GOTO Main


Forward:
  lSpeed = LFwd                                 ' both motors forward
  rSpeed = RFwd
  FOR tix = 1 TO 5
    RANDOM squak                                ' randomize noise maker
    GOSUB Drive_Motors                          ' update motors
  NEXT
  GOTO Main


Left:
  ' make random sounds
  BRANCH (squak // 4), [L_Squak0, L_Squak1, L_Squak2, L_Squak3]

L_Squak0:
  GOSUB RoboSFX_2
  GOSUB RoboSFX_6
  GOTO L_Move

L_Squak1:
  GOSUB RoboSFX_1
  GOSUB RoboSFX_0
  GOTO L_Move

L_Squak2:
  GOSUB RoboSFX_18
  GOSUB RoboSFX_13
  GOTO L_Move

L_Squak3:
  GOSUB RoboSFX_7
  GOSUB RoboSFX_14
  GOTO L_Move

L_Move:
  eeAddr = ObjectRight
  GOSUB Say_Sentence                            ' play message
  GOSUB Wait_Until_Not_Busy

  lSpeed = LRev                                 ' turn robot
  rSpeed = RFwd
  FOR tix = 1 TO 15
    GOSUB Drive_Motors
  NEXT
  GOTO Main


Right:
  BRANCH (squak // 4), [R_Squak0, R_Squak1, R_Squak2, R_Squak3]

R_Squak0:
  GOSUB RoboSFX_1
  GOSUB RoboSFX_7
  GOTO R_Move

R_Squak1:
  GOSUB RoboSFX_8
  GOSUB RoboSFX_2
  GOTO R_Move

R_Squak2:
  GOSUB RoboSFX_11
  GOSUB RoboSFX_14
  GOTO R_Move

R_Squak3:
  GOSUB RoboSFX_10
  GOSUB RoboSFX_7
  GOTO R_Move

R_Move:
  eeAddr = ObjectLeft
  GOSUB Say_Sentence
  GOSUB Wait_Until_Not_Busy

  lSpeed = LFwd
  rSpeed = RRev
  FOR tix = 1 TO 15
    GOSUB Drive_Motors
  NEXT
  GOTO Main


Around:
  BRANCH (squak // 4), [A_Squak0, A_Squak1, A_Squak2, A_Squak3]

A_Squak0:
  GOSUB RoboSFX_2
  GOSUB RoboSFX_3
  GOSUB RoboSFX_6
  GOTO About_Face

A_Squak1:
  GOSUB RoboSFX_1
  GOSUB RoboSFX_4
  GOSUB RoboSFX_0
  GOTO About_Face

A_Squak2:
  GOSUB RoboSFX_3
  GOSUB RoboSFX_18
  GOSUB RoboSFX_7
  GOTO About_Face

A_Squak3:
  GOSUB RoboSFX_9
  GOSUB RoboSFX_12
  GOSUB RoboSFX_10
  GOTO About_Face

About_Face:
  eeAddr = ObjectFront
  GOSUB Say_Sentence
  GOSUB Wait_Until_Not_Busy

  lspeed = LRev
  rSpeed = RFwd
  FOR tix = 1 TO 35
    GOSUB Drive_Motors
  NEXT
  GOTO Main

  END


' ------------------------------------------------------------------------------
' Subroutines
' ------------------------------------------------------------------------------

' *****************************
' Scan IR sensors for obstacles
'  -- "0" = clear
'  -- "1" = obstacle
' *****************************

Scan_IR:
  irBits = 0
  FREQOUT LIR_out, 1, 38500                     ' modulate IR diod
  irLeft = ~LIR_in                              ' check input (invert)
  FREQOUT RIR_out, 1, 38500
  irRight = ~RIR_in
  RETURN


' *******************************
' Update servos for current speed
' *******************************

Drive_Motors:
  PULSOUT LMotor, lSpeed
  PULSOUT RMotor, rSpeed
  PAUSE 15
  RETURN


' ****************************************************
' Makes serial line an input and checks for Busy state
' -- this line will be low when not busy
' ****************************************************

Wait_Until_Not_Busy:
  INPUT QV_SIO                                  ' make comm an input
  IF QV_Busy THEN Wait_Until_Not_Busy           ' wait until busy goes low
  RETURN


' ************************************
' Say a single word
' -- make sure QV356 is in Direct Mode
'    before calling this routine
' ************************************

Say_Word:
  GOSUB Wait_Until_Not_Busy
  IF (qvData > LastPhrase) THEN Say_Word_Exit   ' say only valid words
  SEROUT QV_SIO, N2400, [qvData]                ' say word

Say_Word_Exit:
  RETURN


' **************************************
' Say a sentence
' -- point to sentence in EE with eeAddr
' -- limit is 40 words (no checking)
' **************************************

Say_Sentence:
  GOSUB Wait_Until_Not_Busy
  SEROUT QV_SIO, N2400, [QV_OpenStr]            ' open string buffer
  PAUSE 5

Get_Word:
  READ eeAddr, qvData                           ' read word from sentence data
  IF (qvData = $FF) THEN Play_Buffer            ' sentence done?
  IF (qvData > LastPhrase) THEN Get_Word        ' no -- is word valid?
  SEROUT QV_SIO, N2400, [qvData]                ' yes, send word to buffer
  PAUSE 5
  eeAddr = eeAddr + 1                           ' increment word address
  GOTO Get_Word                                 ' get next word

Play_Buffer:
  SEROUT QV_SIO, N2400, [QV_CloseStr]           ' close string buffer
  PAUSE 5
  SEROUT QV_SIO, N2400, [QV_PlayStr]            ' play the buffer

Say_Sentence_Exit:
  RETURN


' ------------------------------------------------------------------------------
' Robot Sound FX
' ------------------------------------------------------------------------------

RoboSFX_0:
  FOR freq1 = 1 TO 4
    FOR freq2 = 2000 TO 50 STEP 400
      FREQOUT Mix_Out, 10, freq2
    NEXT
    FOR freq2 = 800 TO 2000 STEP 400
      FREQOUT Mix_Out, 10, freq2
    NEXT
  NEXT
  RETURN


RoboSFX_1:
  FOR freq1 = 800 TO 2000 STEP 100
    FREQOUT Mix_Out, 10, freq1
  NEXT
  FOR freq1 = 2000 TO 50 STEP 100
    FREQOUT Mix_Out, 10, freq1
  NEXT
  RETURN


RoboSFX_2:
  FOR freq1 = 1000 TO 40 STEP 20
    FREQOUT Mix_Out, 10, freq1
  NEXT
  RETURN


RoboSFX_3:
  FOR freq1 = 10000 TO 500 STEP 500
    FREQOUT Mix_Out, 10, freq1
  NEXT
  RETURN


RoboSFX_4:
  FOR freq1 = 10 TO 50 STEP 10
    FOR freq2 = 50 TO 10 STEP 50
      FREQOUT Mix_Out, 15, (freq2 * 20)
    NEXT
  NEXT
  RETURN


RoboSFX_5:
  FOR freq1 = 1 TO 120 STEP 2
    FREQOUT Mix_Out, 10, (SIN(freq1 + 40) * 50)
  NEXT
  RETURN


RoboSFX_6:
  FOR freq1 = 10 TO 50 STEP 10
    FOR freq2 = 50 TO 10 STEP 50
      FREQOUT Mix_Out, 10, (freq1 * freq2)
    NEXT
  NEXT
  RETURN


RoboSFX_7:
  FOR freq1 = 30 TO 70 STEP 5
    FOR freq2 = 70 TO 30 STEP 5
      FREQOUT Mix_Out, 10, (freq1 * freq2)
    NEXT
  NEXT
  RETURN


RoboSFX_8:
  FOR freq1 = 30 TO 60 STEP 10
    FOR freq2 = 60 TO 30 STEP 10
      FREQOUT Mix_Out, 10, (freq1 * freq2)
    NEXT
  NEXT
  RETURN


RoboSFX_9:
  FOR freq1 = 1 TO 60 STEP 7
    FREQOUT Mix_Out, 10, (SIN(freq1 + 20) * 30)
  NEXT
  RETURN


RoboSFX_10:
  FOR freq1 = 1 TO 30
    FREQOUT Mix_Out, 20, ((freq1 * 14) + 450)
  NEXT
  RETURN


RoboSFX_11:
  FOR freq1 = 10000 TO 500 STEP 500
    FREQOUT Mix_Out, 20, freq1
  NEXT
  RETURN


RoboSFX_12:
  FOR freq1 = 102 TO 82 STEP 2
    FREQOUT Mix_Out, 40, ((COS(freq1 / 100) + 36) * 25)
    FREQOUT Mix_Out, 20, ((SIN(freq1 / 100) + 20) * 50)
  NEXT
  RETURN


RoboSFX_13:
  FOR freq1 = 1 TO 10
    FREQOUT Mix_Out, 40, 1195
    FREQOUT Mix_Out, 40, 2571
  NEXT
  RETURN


RoboSFX_14:
  FOR freq1 = 1 TO 3
    FREQOUT Mix_Out, 90, 550
    FREQOUT Mix_Out, 90, 400
  NEXT
  RETURN


RoboSFX_15:
  FOR freq1 = 40 TO 15
    FREQOUT Mix_Out, 5, (freq1 * 90)
    FREQOUT Mix_Out, 5, (freq1 * 80)
    FREQOUT Mix_Out, 5, (freq1 * 70)
    FREQOUT Mix_Out, 5, (freq1 * 60)
    FREQOUT Mix_Out, 5, (freq1 * 50)
  NEXT
  RETURN


RoboSFX_16:
  FOR freq1 = 1 TO 20
    FREQOUT Mix_Out, 20, (1195 - (freq1 * 50))
    FREQOUT Mix_Out, 20, (1195 + (freq1 * 50))
  NEXT
  RETURN


RoboSFX_17:
  FOR freq1 = 0 TO 150 STEP 10
    FREQOUT Mix_Out, 20, 1295 - freq1
    FREQOUT Mix_Out, 20, 1095 + freq1
  NEXT
  RETURN


RoboSFX_18:
  FOR freq1 = 1 TO 20
    FREQOUT Mix_Out, 10, (freq1 * 50)
    FREQOUT Mix_Out, 10, (freq1 * 100)
    FREQOUT Mix_Out, 10, (freq1 * 150)
  NEXT
  RETURN

