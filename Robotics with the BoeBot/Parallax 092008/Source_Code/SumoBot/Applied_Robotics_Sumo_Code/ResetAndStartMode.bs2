' -----[ Title ]--------------------------------------------------------------
' ---> Updated <---
' Applied Robotics with the SumoBot - ResetAndStartMode.bs2
' Program constructed by copying and pasting code from
' PushbuttonMode.bs2 into TestResetButton.bs2.

' {$STAMP BS2}                               ' Target = BASIC Stamp 2
' {$PBASIC 2.5}                              ' Language = PBASIC 2.5

' -----[ I/O Definitions ]----------------------------------------------------

LedSpeaker     PIN     5                     ' P5 controls LED & speaker

' ---> Pasted from PushbuttonMode.bs2 <---
pbSense        PIN     6                     ' Pushbutton connected to P6

' -----[ Variables ]----------------------------------------------------------

temp            VAR     Word                 ' Temporary variable
counter         VAR     Byte                 ' Loop counting variable.

' -----[ EEPROM Data ]--------------------------------------------------------

RunStatus       DATA    0                    ' Run status EEPROM byte

' ---> Pasted from PushbuttonMode.bs2 <---
ModeSelect      DATA    0                    ' Program


' -----[ Initialization ]-----------------------------------------------------

' ---> Pasted from PushbuttonMode.bs2 <---
IF pbSense = 1 THEN GOSUB Mode_Select        ' Call Mode_Select subroutine

GOSUB Reset                                  ' Wait for Reset press/release
GOSUB Start_Delay                            ' 5 Second delay

' -----[ Main Routine ]-------------------------------------------------------

' ---> Pasted from PushbuttonMode.bs2 (ModeTest routine)<---
ModeTest:
  READ ModeSelect, temp                      ' Fetch mode from EEPROM

  IF temp = 0 THEN                           ' Mode = 0 -> no mode selected
    DEBUG CR, "No mode selected",
          CR, "Hold down pushbutton",
          CR, "then press/release",
          CR, "Reset button."
  ELSE                                       ' mode <> 0 -> display mode
    DEBUG CR, CR, "Operating in mode ", CR   ' Mode Message
    SELECT temp                              ' Select mode value to display
      CASE 1
        DEBUG "one"
      CASE 2
        DEBUG "two"
      CASE 3
        DEBUG "three"
      CASE 4
        DEBUG "four"
      CASE 5
        DEBUG "five"
    ENDSELECT
  ENDIF

ResetTest:
  DEBUG CR, "Done!"                          ' Verify we made it to main.
  END

' -----[ Subroutine - Reset ]-------------------------------------------------

Reset:

  READ RunStatus, temp                       ' Byte @RunStatus -> temp
  temp = temp + 1                            ' Increment temp
  WRITE RunStatus, temp                      ' Store new value for next time

  IF (temp.BIT0 = 1) THEN                    ' Examine temp.BIT0
    DEBUG CLS, "Press/release Reset", CR,    ' 1 -> end, 0 -> keep going
               "button..."
    END
  ELSE
    DEBUG CR, "Program running..."
  ENDIF

  RETURN

' -----[ Subroutine - Start_Delay ]-------------------------------------------

Start_Delay:

  FOR counter = 1 TO 5                       ' 5 beeps, 1/second
    PAUSE 900
    FREQOUT LedSpeaker, 100, 3000
  NEXT

  RETURN

' ---> Pasted from PushbuttonMode.bs2 (Mode_Select subroutine) <---
' -----[ Subroutine - Mode_Select ]-------------------------------------------

' Selects mode of operation

Mode_Select:

  DEBUG CR,                                  ' Display user instructions
        CR, "Release pushbutton after",
        CR, "number of beeps to select",
        CR, "mode (1 to 5)."

  FOR temp = 1 TO 5                          ' Cycle 5 times
    FOR counter = 1 TO temp                  ' temp beeps, 1/second
      PAUSE 100
      FREQOUT LedSpeaker, 100, 4000
    NEXT
    PAUSE 1000                               ' 1 second between beeps
    IF pbSense = 0 THEN                      ' Button released?
      WRITE ModeSelect, temp                 ' Record mode to EEPROM
      EXIT                                   ' Exit FOR...NEXT loop
    ENDIF
  NEXT

  RETURN

