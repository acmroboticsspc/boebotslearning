' =========================================================================
'
'   File....... PCF8591.BS2
'   Purpose.... PCF8591 demo for BS2/BS2e/BS2sx
'   Author..... Jon Williams, Parallax
'   E-mail..... jwilliams@parallax.com
'   Started....
'   Updated.... 10 SEP 2004
'
'   {$STAMP BS2}
'   {$PBASIC 2.5}
'
' =========================================================================


' -----[ Program Description ]---------------------------------------------
'
' This program demonstates the Philips PCF8591 4-channel A2D plus 1-channel
' D2A.  Channel 0 input is tied to the output of the D2A pin.  Channels 1
' and 2 are pots (0 - 5v input).  Channe 3 is tied to Vss.


' -----[ Revision History ]------------------------------------------------


' -----[ I/O Definitions ]-------------------------------------------------

SDA             PIN     0                       ' I2C serial data line
SCL             PIN     1                       ' I2C serial clock line


' -----[ Constants ]-------------------------------------------------------

Ack             CON     0                       ' acknowledge bit
Nak             CON     1                       ' no ack bit

PCF8591         CON     %1001 << 4              ' device type
EnableD2A       CON     %01000000               ' enable analog output
AutoInc         CON     %00000100               ' auto inc a2d channels

MVPB            CON     $139C                   ' millivolts per bit factor


' -----[ Variables ]-------------------------------------------------------

slvAddr         VAR     Byte                    ' I2C slave address
devNum          VAR     Nib                     ' device number (0 - 7)
addrLen         VAR     Nib                     ' bytes in word addr (0 - 2)
wrdAddr         VAR     Word                    ' word address

i2cData         VAR     Byte                    ' data to/from device
i2cWork         VAR     Byte                    ' work byte for TX routine
i2cAck          VAR     Bit                     ' Ack bit from device

aOut            VAR     Byte                    ' analog output
aIn             VAR     Byte(4)                 ' analog input channels

idx             VAR     Nib


' -----[ EEPROM Data ]-----------------------------------------------------


' -----[ Initialization ]--------------------------------------------------

Check_Module:
  #IF ($STAMP >= BS2P) #THEN
    #ERROR "Use I2COUT and I2CIN!"
  #ENDIF

  devNum = %000                                 ' chip select (%000 - %111)
  slvAddr = PCF8591 | (devNum << 1)             ' setup slave ID
  addrLen = 1                                   ' 1 byte in word address

Setup:
  DEBUG CLS
  DEBUG "PCF8591 Demo", CR,
        "------------", CR,
        "D2A:        ", CR,
        "Ch0:        ", CR,
        "Ch1:        ", CR,
        "Ch2:        ", CR,
        "Ch3:        "


' -----[ Program Code ]----------------------------------------------------

Main:
  FOR aOut = 0 TO 255
    DEBUG CRSRXY, 5, 2, DEC3 aOut
    i2cData = aOut
    wrdAddr = EnableD2A | AutoInc
    GOSUB Write_Byte
    GOSUB Read_Analog
    FOR idx = 0 TO 3
      DEBUG CRSRXY, 5, (3 + idx), DEC3 aIn(idx)
    NEXT
    PAUSE 500
  NEXT
  GOTO Main


' -----[ Subroutines ]-----------------------------------------------------

' Reads all four analog channels from PCF8591
' -- pass device slave address in "slvAddr"
' -- values returned in aIn() array

Read_Analog:
  GOSUB I2C_Start                               ' send Start
  i2cWork = slvAddr | %00000001                 ' send slave ID (read)
  GOSUB I2C_TX_Byte
  GOSUB I2C_RX_Byte                             ' clear previous conversion
  FOR idx = 0 TO 2
    GOSUB I2C_RX_Byte
    aIn(idx) = i2cWork                          ' read Ch0 - Ch2
  NEXT
  GOSUB I2C_RX_Byte_Nak
  aIn(3) = i2cWork                              ' read Ch3
  GOSUB I2C_Stop
  RETURN


' =====[ High Level I2C Subroutines]=======================================

' Random location write
' -- pass device slave address in "slvAddr"
' -- pass bytes in word address (0, 1 or 2) in "addrLen"
' -- word address to write passed in "wrdAddr"
' -- data byte to be written is passed in "i2cData"

Write_Byte:
  GOSUB I2C_Start                               ' send Start
  i2cWork = slvAddr & %11111110                 ' send slave ID (write)
  GOSUB I2C_TX_Byte
  IF (i2cAck = Nak) THEN Write_Byte             ' wait until not busy
  IF (addrLen > 0) THEN
    IF (addrLen = 2) THEN
      i2cWork = wrdAddr.BYTE1                   ' send word address (1)
      GOSUB I2C_TX_Byte
    ENDIF
    i2cWork = wrdAddr.BYTE0                     ' send word address (0)
    GOSUB I2C_TX_Byte
  ENDIF
  i2cWork = i2cData                             ' send data
  GOSUB I2C_TX_Byte
  GOSUB I2C_Stop
  RETURN


' Random location read
' -- pass device slave address in "slvAddr"
' -- pass bytes in word address (0, 1 or 2) in "addrLen"
' -- word address to write passed in "wrdAddr"
' -- data byte read is returned in "i2cData"

Read_Byte:
  GOSUB I2C_Start                               ' send Start
  IF (addrLen > 0) THEN
    i2cWork = slvAddr & %11111110               ' send slave ID (write)
    GOSUB I2C_TX_Byte
    IF (i2cAck = Nak) THEN Read_Byte            ' wait until not busy
    IF (addrLen = 2) THEN
      i2cWork = wrdAddr.BYTE1                   ' send word address (1)
      GOSUB I2C_TX_Byte
    ENDIF
    i2cWork = wrdAddr.BYTE0                     ' send word address (0)
    GOSUB I2C_TX_Byte
    GOSUB I2C_Start
  ENDIF
  i2cWork = slvAddr | %00000001                 ' send slave ID (read)
  GOSUB I2C_TX_Byte
  GOSUB I2C_RX_Byte_Nak
  GOSUB I2C_Stop
  i2cData = i2cWork
  RETURN


' -----[ Low Level I2C Subroutines ]---------------------------------------

' *** Start Sequence ***

I2C_Start:                                      ' I2C start bit sequence
  INPUT SDA
  INPUT SCL
  LOW SDA

Clock_Hold:
  DO : LOOP UNTIL (SCL = 1)                     ' wait for clock release
  RETURN


' *** Transmit Byte ***

I2C_TX_Byte:
  SHIFTOUT SDA, SCL, MSBFIRST, [i2cWork\8]      ' send byte to device
  SHIFTIN SDA, SCL, MSBPRE, [i2cAck\1]          ' get acknowledge bit
  RETURN


' *** Receive Byte ***

I2C_RX_Byte_Nak:
  i2cAck = Nak                                  ' no Ack = high
  GOTO I2C_RX

I2C_RX_Byte:
  i2cAck = Ack                                  ' Ack = low

I2C_RX:
  SHIFTIN SDA, SCL, MSBPRE, [i2cWork\8]         ' get byte from device
  SHIFTOUT SDA, SCL, LSBFIRST, [i2cAck\1]       ' send ack or nak
  RETURN


' *** Stop Sequence ***

I2C_Stop:                                       ' I2C stop bit sequence
  LOW SDA
  INPUT SCL
  INPUT SDA
  RETURN