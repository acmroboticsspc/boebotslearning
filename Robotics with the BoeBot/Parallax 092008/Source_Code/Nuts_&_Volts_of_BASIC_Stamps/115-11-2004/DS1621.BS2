' =========================================================================
'
'   File....... DS1621.BS2
'   Purpose.... DS1621 demo for BS2/BS2e/BS2sx
'   Author..... Jon Williams, Parallax
'   E-mail..... jwilliams@parallax.com
'   Started....
'   Updated.... 07 SEP 2004
'
'   {$STAMP BS2}
'   {$PBASIC 2.5}
'
' =========================================================================


' -----[ Program Description ]---------------------------------------------


' -----[ Revision History ]------------------------------------------------


' -----[ I/O Definitions ]-------------------------------------------------

SDA             PIN     0                       ' I2C serial data line
SCL             PIN     1                       ' I2C serial clock line


' -----[ Constants ]-------------------------------------------------------

DS1621          CON     %1001 << 4              ' Device type

Ack             CON     0                       ' acknowledge bit
Nak             CON     1                       ' no ack bit

RdTemp          CON     $AA                     ' read temperature
RdCntr          CON     $A8                     ' read counter
RdSlope         CON     $A9                     ' read slope
StartC          CON     $EE                     ' start conversion
StopC           CON     $22                     ' stop conversion
AccTH           CON     $A1                     ' access high temp limit
AccTL           CON     $A2                     ' access low temp limit
AccCfg          CON     $AC                     ' access config register

TempHi          CON     25                      ' 25C = ~77F
TempLo          CON     22                      ' 25C = ~72F

DegSym          CON     176                     ' degrees symbol


' -----[ Variables ]-------------------------------------------------------

slvAddr         VAR     Byte                    ' I2C slave address
devNum          VAR     Nib                     ' device number (0 - 7)
addrLen         VAR     Nib                     ' bytes in word addr (0 - 2)
wrdAddr         VAR     Word                    ' word address

i2cData         VAR     Byte                    ' data to/from device
i2cWork         VAR     Byte                    ' work byte for TX routine
i2cAck          VAR     Bit                     ' Ack bit from device

tempIn          VAR     Word                    ' raw temp from DS1621
sign            VAR     tempIn.BIT8             ' - sign (after alignment)
halfC           VAR     tempIn.BIT0             ' half-degree C bit
tempC           VAR     Word                    ' temp in Celsius
tempF           VAR     Word                    ' temp in Fahrenheit


' -----[ EEPROM Data ]-----------------------------------------------------


' -----[ Initialization ]--------------------------------------------------

Reset:
  #IF ($stamp >= BS2P) #THEN
    #ERROR "Use I2COUT and I2CIN!"
  #ENDIF

  devNum = %000                                 ' chip select (%000 - %111)
  slvAddr = DS1621 | (devNum << 1)              ' setup slave ID

Setup:
  addrLen = 1
  wrdAddr = AccCfg
  i2cData = %1010
  GOSUB Write_Byte                              ' set TOut = active high
  PAUSE 10                                      ' allow EE write
  addrLen = 0
  i2cData = StartC
  GOSUB Write_Byte                              ' start conversions

Set_Thermostat:
  addrLen = 1
  wrdAddr = AccTH
  i2cData = TempHi
  GOSUB Write_Byte                              ' set high threshold
  wrdAddr = AccTL
  i2cData = TempLo
  GOSUB Write_Byte                              ' set low threshold


Demo_Screen:
  DEBUG CLS,
        "DS1621 Demo", CR,
        "-----------", CR,
        DegSym, "C... ", CR,
        DegSym, "F... "


' -----[ Program Code ]----------------------------------------------------

Main:
  DO
    PAUSE 1000                                  ' delay between reads
    GOSUB Get_Temp                              ' get current temperature
    DEBUG CRSRXY, 6, 2, SDEC tempC, CLREOL,     ' display
          CRSRXY, 6, 3, SDEC tempF, CLREOL
  LOOP
  END


' -----[ Subroutines ]-----------------------------------------------------

Get_Temp:
  GOSUB I2C_Start                               ' send Start
  i2cWork = slvAddr & %11111110                 ' send slave ID (write)
  GOSUB I2C_TX_Byte
  IF (i2cAck = Nak) THEN Get_Temp               ' wait until not busy
  i2cWork = RdTemp                              ' send read temp command
  GOSUB I2C_TX_Byte
  GOSUB I2C_Start
  i2cWork = slvAddr | %00000001                 ' send slave ID (read)
  GOSUB I2C_TX_Byte
  GOSUB I2C_RX_Byte
  tempIn.BYTE1 = i2cWork                        ' get temp MSB
  GOSUB I2C_RX_Byte_Nak
  tempIn.BYTE0 = i2cWork                        ' get temp LSB
  GOSUB I2C_Stop

  tempIn = tempIn >> 7                          ' correct bit alignment
  ' Celsius
  tempC = (tempIn / 2) | ($FF00 * sign)
  ' Fahrenheit
  tempF = (tempIn | ($FF00 * sign)) + 110       ' convert to absolute T
  tempF = tempF * 9 / 10 - 67                   ' convert to F
  RETURN


' =====[ High Level I2C Subroutines]=======================================

' Random location write
' -- pass device slave address in "slvAddr"
' -- pass bytes in word address (0, 1 or 2) in "addrLen"
' -- word address to write passed in "wrdAddr"
' -- data byte to be written is passed in "i2cData"

Write_Byte:
  GOSUB I2C_Start                               ' send Start
  i2cWork = slvAddr & %11111110                 ' send slave ID (write)
  GOSUB I2C_TX_Byte
  IF (i2cAck = Nak) THEN Write_Byte             ' wait until not busy
  IF (addrLen > 0) THEN
    IF (addrLen = 2) THEN
      i2cWork = wrdAddr.BYTE1                   ' send word address (1)
      GOSUB I2C_TX_Byte
    ENDIF
    i2cWork = wrdAddr.BYTE0                     ' send word address (0)
    GOSUB I2C_TX_Byte
  ENDIF
  i2cWork = i2cData                             ' send data
  GOSUB I2C_TX_Byte
  GOSUB I2C_Stop
  RETURN


' Random location read
' -- pass device slave address in "slvAddr"
' -- pass bytes in word address (0, 1 or 2) in "addrLen"
' -- word address to write passed in "wrdAddr"
' -- data byte read is returned in "i2cData"

Read_Byte:
  GOSUB I2C_Start                               ' send Start
  IF (addrLen > 0) THEN
    i2cWork = slvAddr & %11111110               ' send slave ID (write)
    GOSUB I2C_TX_Byte
    IF (i2cAck = Nak) THEN Read_Byte            ' wait until not busy
    IF (addrLen = 2) THEN
      i2cWork = wrdAddr.BYTE1                   ' send word address (1)
      GOSUB I2C_TX_Byte
    ENDIF
    i2cWork = wrdAddr.BYTE0                     ' send word address (0)
    GOSUB I2C_TX_Byte
    GOSUB I2C_Start
  ENDIF
  i2cWork = slvAddr | %00000001                 ' send slave ID (read)
  GOSUB I2C_TX_Byte
  GOSUB I2C_RX_Byte_Nak
  GOSUB I2C_Stop
  i2cData = i2cWork
  RETURN


' -----[ Low Level I2C Subroutines ]---------------------------------------

' *** Start Sequence ***

I2C_Start:                                      ' I2C start bit sequence
  INPUT SDA
  INPUT SCL
  LOW SDA

Clock_Hold:
  DO : LOOP UNTIL (SCL = 1)                     ' wait for clock release
  RETURN


' *** Transmit Byte ***

I2C_TX_Byte:
  SHIFTOUT SDA, SCL, MSBFIRST, [i2cWork\8]      ' send byte to device
  SHIFTIN SDA, SCL, MSBPRE, [i2cAck\1]          ' get acknowledge bit
  RETURN


' *** Receive Byte ***

I2C_RX_Byte_Nak:
  i2cAck = Nak                                  ' no Ack = high
  GOTO I2C_RX

I2C_RX_Byte:
  i2cAck = Ack                                  ' Ack = low

I2C_RX:
  SHIFTIN SDA, SCL, MSBPRE, [i2cWork\8]         ' get byte from device
  SHIFTOUT SDA, SCL, LSBFIRST, [i2cAck\1]       ' send ack or nak
  RETURN


' *** Stop Sequence ***

I2C_Stop:                                       ' I2C stop bit sequence
  LOW SDA
  INPUT SCL
  INPUT SDA
  RETURN