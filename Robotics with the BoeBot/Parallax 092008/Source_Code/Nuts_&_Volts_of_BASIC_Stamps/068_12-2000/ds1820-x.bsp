' Listing 2
' Nuts & Volts - December 2000

' -----[ Title ]-----------------------------------------------------------
'
' File...... DS1820-x.BSP
' Purpose... BASIC Stamp SX Plus <--> Multiple DS1820s Demo
' Author.... Jon Williams
' E-mail.... jonwms@aol.com
' Started... 04 NOV 2000
' Updated... 05 NOV 2000 


' -----[ Program Description ]---------------------------------------------
'
' This program reads and displays the temperature from multiple DS1820 
' (1-wire) sensors.
'
' Program requires 2x16 LCD
'   - LCD.E 	--> Pin0 (pulled down [to ground] through 4.7K)
'   - LCD.R/W	--> Pin2 (or grounded for write-only operation)
'   - LCD.RS 	--> Pin3
'   - LCD.D4	--> Pin4
'   - LCD.D5	--> Pin5
'   - LCD.D6	--> Pin6
'   - LCD.D7	--> Pin7


' -----[ Revision History ]------------------------------------------------
'


' -----[ I/O Definitions ]-------------------------------------------------
'
LCDpin		CON	0			' data on pins 4 - 7
DS1820pin	CON	11


' -----[ Constants ]-------------------------------------------------------
'
' LCD control characters
'
NoCmd		CON	$00			' just print 
ClrLCD  	CON     $01             	' clear the LCD
CrsrHm  	CON     $02             	' cursor home
CrsrLf  	CON     $10             	' cursor left
CrsrRt  	CON     $14			' move cursor right
DispLf  	CON     $18			' shift display left
DispRt  	CON     $1C			' shift displayright
DDRam   	CON     $80			' Display Data RAM control
Line1		CON	$80			' address of line 1
Line2		CON	$C0			' address of line 2

DegSym		CON	223			' degrees symbol

' DS1820 control
'
ReadROM		CON	$33			' read ID, serial num, CRC
MatchROM	CON	$55			' look for specific device
SkipROM		CON	$CC			' skip rom (one device)
ConvertTemp	CON	$44			' do temperature conversion
ReadScratch	CON	$BE			' read DS1820 scratchpad

NumSensors	CON	3			' number of DS1820s

' -----[ Variables ]-------------------------------------------------------
'
sensor		VAR	Byte			' sensor number to process
idx		VAR	Byte			' loop counter
eeAddr		VAR	Byte			' ee address of ROM match
romData		VAR	Byte(8)			' ROM data to DS1820
tempIn		VAR	Word			' raw temperature
sign		VAR	tempIn.Bit8		' 1 = negative temperature
tInLow		VAR	tempIn.LowByte
tInHigh		VAR	tempIn.HighByte
tSign		VAR	Bit
tempC		VAR	Word			' Celsius
tempF		VAR	Word			' Fahrenheit


' -----[ EEPROM Data ]-----------------------------------------------------
'
			' ROM codes for connected sensors

Temp1		DATA	$10,$F1,$67,$45,$00,$00,$00,$9F
Temp2		DATA	$10,$81,$CF,$45,$00,$00,$00,$0A
Temp3		DATA	$10,$C9,$70,$45,$00,$00,$00,$FE


' -----[ Initialization ]--------------------------------------------------
'
LCD_Setup:
  LCDCMD LCDpin,%00110000 : PAUSE 5		' 8-bit mode
  LCDCMD LCDpin,%00110000 : PAUSE 0
  LCDCMD LCDpin,%00110000 : PAUSE 0
  LCDCMD LCDpin,%00100000 : PAUSE 0		' 4-bit mode
  LCDCMD LCDpin,%00101000 : PAUSE 0		' 2-line mode
  LCDCMD LCDpin,%00001100 : PAUSE 0		' no crsr, no blink 
  LCDCMD LCDpin,%00000110			' inc crsr, no disp shift


' -----[ Main Code ]-------------------------------------------------------
'
Main:
  LCDOUT LCDpin,ClrLCD,["BSP <---> DS1820"]	' splash screen
  LCDOUT LCDpin,Line2, ["Multiple Sensors"]
  PAUSE 2000
  LCDCMD LCDpin,ClrLCD
 

ShowDS1820s:
  FOR sensor = 1 TO NumSensors			' cycle through sensors
    eeAddr = Temp1+(8*(sensor-1))		' point to ROM code
    GOSUB GetTemp
    LCDOUT LCDpin,Line1,["Sensor ",("0"+sensor),":"]
    PAUSE 1500
  NEXT

  GOTO ShowDS1820s
  END


' -----[ Subroutines ]-----------------------------------------------------
'

GetTemp:
  FOR idx = 0 TO 7				' load ROM pattern
    READ (eeAddr+idx),romData(idx)
  NEXT

  ' * send conversion command
  ' * allow time for conversion
  ' * send read scratch ram command
  ' * grab the data

  OWOUT DS1820pin,1,[MatchROM,STR romData\8,ConvertTemp]
  PAUSE 500
  OWOUT DS1820pin,1,[MatchROM,STR romData\8,ReadScratch]
  OWIN  DS1820pin,2,[tInLow,tInHigh]

  tSign = sign					' save sign bit
  tempIn = tempIn/2				' round to whole degrees
  IF tSign = 0 THEN NoNeg1
  tempIn = tempIn | $FF00			' extend sign bits for negs

NoNeg1:
  tempC = tempIn				' save Celsius value
  tempIn = tempIn */ $01CC			' multiply by 1.8
  IF tSign = 0 THEN NoNeg2			' if neg, extend sign bits
  tempIn = tempIn | $FF00
  
NoNeg2:
  tempF = tempIn+32				' finish C -> F conversion

ShowTemps:
  LCDOUT LCDpin,Line1+10,[SDEC tempC, DegSym, " C   "]
  LCDOUT LCDpin,Line2+10,[SDEC tempF, DegSym, " F   "]

  RETURN
